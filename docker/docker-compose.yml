version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: trading_robot_postgres
    environment:
      POSTGRES_DB: trading_robot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: trading_robot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network

  # 后端API服务
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: trading_robot_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_robot
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ../backend:/app
      - backend_logs:/app/logs
    networks:
      - trading_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: trading_robot_celery
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_robot
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    volumes:
      - ../backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Celery Beat (定时任务)
  celery_beat:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: trading_robot_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_robot
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    volumes:
      - ../backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: trading_robot_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - trading_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: trading_robot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_logs:

networks:
  trading_network:
    driver: bridge
